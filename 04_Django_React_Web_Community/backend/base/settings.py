"""
Django settings for base project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os, json
from django.core.exceptions import ImproperlyConfigured 
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECRET_KEY 호출 #####################################################################
secret_file = os.path.join(BASE_DIR, 'secrets.json') #secrets.json을 불러옴

with open(secret_file, 'r') as f: #open as로 secrets.json을 열어줌
    secrets = json.loads(f.read())

def get_secret(setting, secrets=secrets): #예외 처리를 통해 오류 발생을 검출함
    try:
        return secrets[setting]
    except KeyError:
        error_msg = "Set the {} environment variable".format(setting)
        raise ImproperlyConfigured(error_msg)

SECRET_KEY = get_secret("SECRET_KEY")
########################################################################################

DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # Local Apps
    'accounts',
    'articles',

    # Third-Party Apps
    'corsheaders',

    # allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.kakao',
    'allauth.socialaccount.providers.naver',

    #rest_framework
    'rest_framework', # rest_framework
    'rest_framework_simplejwt', # 필수는 아니지만, localizaition/translations을 사용하려면 추가(뭔말인지 이해x)
    'rest_framework_simplejwt.token_blacklist', # 필요없는 token이나 해킹된 token을 서버에서 사용할 수 없도록 보안을 높일 수 있는 앱
    'rest_framework.authtoken',

    # DRF auth
    'dj_rest_auth', # sign 제외 auth
    'dj_rest_auth.registration', # signup

    # Django Basic
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', # 반드시 CommonMiddleware 위에 씀
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'base.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'base.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 커스텀 유저 모델을 사용함
AUTH_USER_MODEL = 'accounts.User'

# CORS 허용
CORS_ALLOWED_ORIGIN = [
    # React Local Host
    'http://localhost:3000'
]
# CORS_ALLOW_ALL_ORIGIN = True

# REST_FRAMEWORK JWT 기본 세팅
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

# JWT 세팅 추가(공식 문서를 보고 항목을 추가하여 커스텀하면 된다)
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5), # Access 토큰의 유효기간을 5분으로 설정함
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1), # Refresh 토큰의 유효기간을 1일로 설정함
    'ROTATE_REFRESH_TOKENS': False, # True로 설정하면, refresh token을 보내면 새로운 refresh token과 access token이 반환됨
    'BLACKLIST_AFTER_ROTATION': True, # third party app에 rest_framework_simplejwt.token_blacklist가 있어야 사용 가능. True로 설정 시 보내진 refresh token을 더 이상 사용할 수 없도록 블랙리스트에 등록함
    'ALGORITHM': 'HS256', # 해시 알고리즘 설정
    'SIGNING_KEY': SECRET_KEY, # Django SECRET_KEY를 SIGNING_KEY로 사용함
    'AUTH_HEADER_TYPES': ('Bearer',), # 토큰의 헤더가 'Bearer'
    'TOKEN_USER_CLASS': 'accounts.User'
}
